pipeline{
    agent any
    tools{
        maven 'maven'
    }
    options {
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '3')
    }
    environment {
        dockerhub_cred = credentials('dockerhub_cred')
        //aws_cred = credentials('aws-ID')

    }
    stages{
        stage('Cleanup') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout stage'){
            steps{
                checkout([$class: 'GitSCM',
                branches: [[name: 'main']],  
                extensions: [[$class: 'CleanCheckout']],
                userRemoteConfigs: [[url: 'https://github.com/jadugarmjadugar/Projects-star.git']]])
            }
        }
         stage('build') {
            steps {
                dir('star-agile-insurance-project'){
                    sh 'mvn clean package'
                    //sh 'mvn jacoco:report'
                    //archiveArtifacts 'target/*.jar'
                }
            }
                //post {
                    // success {
                        // dir('star-agile-insurance-project'){
                           // jacoco(
                             //   execPattern: '**/build/jacoco/*.exec',
                              //  classPattern: '**/build/classes/java/main',
                              //  sourcePattern: '**/src/main'
                           // )
                       // }
                   // }
               // }     
            }
        // stage('Mutation Tests - PIT') {
          // steps {
               // dir('star-agile-insurance-project'){
                    // sh "mvn org.pitest:pitest-maven:mutationCoverage"
                // }
         //  }
         //  post {
                  //  always {
                      //  dir('star-agile-insurance-project'){
                         //   pitmutation mutationStatsFile: '**/target/pit-reports/**/mutations.xml'
                       // }
                   // }
               // }    
        // } 
            stage('Vulnerability Scan - Docker') {
               steps {
                 dir('star-agile-insurance-project'){ 
         		sh "mvn dependency-check:check"
                }
             }
            post {
                    always {
                        dir('star-agile-insurance-project'){
                            dependencyCheckPublisher pattern: 'target/dependency-check-report.xml'
                        }
                    }
                }    
             } 
    
        stage('docker'){
            steps{
                dir('star-agile-insurance-project'){
                    sh 'docker build -t jadugarmjadugar/insuranceproject:1.0 .'
                }
            }
        }
        stage('docker push'){
            steps{
                dir('star-agile-insurance-project'){
                    sh 'echo $dockerhub_cred_PSW | docker login -u $dockerhub_cred_USR --password-stdin'
                    sh 'docker push jadugarmjadugar/insuranceproject:1.0'
                }
            }
        }
    }
        //stage('ecr push'){
            //steps{
                //sh 'aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 831202177837.dkr.ecr.us-east-1.amazonaws.com'
                //sh 'docker build -t test-jenkins:$BUILD_NUMBER .'
                //sh 'docker tag test-jenkins:$BUILD_NUMBER 831202177837.dkr.ecr.us-east-1.amazonaws.com/test-jenkins:$BUILD_NUMBER'
                //sh 'docker push 831202177837.dkr.ecr.us-east-1.amazonaws.com/test-jenkins:$BUILD_NUMBER'
                //sh 'docker tag test-jenkins:latest 831202177837.dkr.ecr.us-east-1.amazonaws.com/test-jenkins:latest'
                //sh 'docker push 831202177837.dkr.ecr.us-east-1.amazonaws.com/test-jenkins:latest'
            //}
        //}
        //stage('kubernetes deploy'){
            //steps{
                    //sh 'eksctl version'
                    //sh 'aws sts get-caller-identity'
                    //sh 'kubectl version --short --client'
                    //sh 'aws eks update-kubeconfig --region us-east-1 --name test-1'
                    //sh 'kubectl get svc'  //LINE WAS COMMENTED
                    //withCredentials([aws(accessKeyVariable:'AWS_ACCESS_KEY_ID', credentialsId: 'aws-cred', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                            //sh ('aws eks update-kubeconfig --name <EKS_CLUSTER_NAME> --region <AWS_REGION>')  //LINE WAS COMMENTED
                            //sh 'aws sts get-caller-identity'
                            //sh 'kubectl get svc'
                            //sh 'kubectl run insuranceproject-pod --image=jadugarmjadugar/insuranceproject:1.0' // LINE WAS COMMENTED
                            //sh 'kubectl get pods'    
                //}
            //}
        //}   
    //}

}
